# Makefile for managing Docker Compose
COMPOSE = docker-compose.yml
SERVER_CONTAINER = server
DB_CONTAINER = db

# Development
up:
	docker compose -f $(COMPOSE) up --build

up-detached:
	docker compose -f $(COMPOSE) up --build -d

down:
	docker compose -f $(COMPOSE) down

down-clean:
	docker compose -f $(COMPOSE) down -v --remove-orphans

logs:
	docker compose -f $(COMPOSE) logs -f

logs-server:
	docker compose -f $(COMPOSE) logs -f $(SERVER_CONTAINER)

logs-db:
	docker compose -f $(COMPOSE) logs -f $(DB_CONTAINER)

restart:
	docker compose -f $(COMPOSE) restart

restart-server:
	docker compose -f $(COMPOSE) restart $(SERVER_CONTAINER)

backend:
	docker compose -f $(COMPOSE) up --build $(SERVER_CONTAINER) $(DB_CONTAINER)

frontend:
	docker compose -f $(COMPOSE) up --build client

# Database
db-shell:
	docker compose -f $(COMPOSE) exec $(DB_CONTAINER) psql -U ${POSTGRES_USER} -d ${POSTGRES_DB}

db-makemigrations:
	docker compose -f $(COMPOSE) exec $(SERVER_CONTAINER) python manage.py makemigrations

db-makemigrations-app:
	docker compose -f $(COMPOSE) exec $(SERVER_CONTAINER) python manage.py makemigrations $(app)

db-migrate:
	docker compose -f $(COMPOSE) exec $(SERVER_CONTAINER) python manage.py migrate

db-migrate-app:
	docker compose -f $(COMPOSE) exec $(SERVER_CONTAINER) python manage.py migrate $(app)

db-showmigrations:
	docker compose -f $(COMPOSE) exec $(SERVER_CONTAINER) python manage.py showmigrations

db-reset: down-clean up-detached
	sleep 5
	docker compose -f $(COMPOSE) exec $(SERVER_CONTAINER) python manage.py migrate

# Django Management
shell:
	docker compose -f $(COMPOSE) exec $(SERVER_CONTAINER) python manage.py shell

createsuperuser:
	docker compose -f $(COMPOSE) exec $(SERVER_CONTAINER) python manage.py createsuperuser

collectstatic:
	docker compose -f $(COMPOSE) exec $(SERVER_CONTAINER) python manage.py collectstatic --noinput

test:
	docker compose -f $(COMPOSE) exec $(SERVER_CONTAINER) python manage.py test

test-app:
	docker compose -f $(COMPOSE) exec $(SERVER_CONTAINER) python manage.py test $(app)

# Frontend Management
client-bash:
	docker compose -f $(COMPOSE) exec client sh

client-logs:
	docker compose -f $(COMPOSE) logs -f client

client-install:
	docker compose -f $(COMPOSE) exec client npm install

client-audit:
	docker compose -f $(COMPOSE) exec client npm audit

client-audit-fix:
	docker compose -f $(COMPOSE) exec client npm audit fix

client-audit-fix-force:
	docker compose -f $(COMPOSE) exec client npm audit fix --force

client-update-browserslist:
	docker compose -f $(COMPOSE) exec client npx browserslist@latest --update-db

# Docker Management
ps:
	docker compose -f $(COMPOSE) ps

images:
	docker compose -f $(COMPOSE) images

volumes:
	docker compose -f $(COMPOSE) volume ls

stats:
	docker stats $$(docker compose -f $(COMPOSE) ps -q)

# Server Management
server-bash:
	docker compose -f $(COMPOSE) exec $(SERVER_CONTAINER) bash

server-logs:
	docker compose -f $(COMPOSE) logs -f $(SERVER_CONTAINER)

# Dependencies
requirements:
	docker compose -f $(COMPOSE) exec $(SERVER_CONTAINER) pip freeze > requirements.txt

i-deps:
	docker compose -f $(COMPOSE) run --rm $(SERVER_CONTAINER) pip install -r requirements.txt

# Cleanup
clean-cache:
	docker system prune -f

clean-all: down-clean
	docker system prune -a -f

# Health Check
health:
	docker compose -f $(COMPOSE) ps
	@echo "--- Database Connection ---"
	docker compose -f $(COMPOSE) exec $(SERVER_CONTAINER) python -c "import django; django.setup(); from django.db import connection; cursor = connection.cursor(); cursor.execute('SELECT 1'); print('‚úÖ Database connected')"
	@echo "--- Django Check ---"
	docker compose -f $(COMPOSE) exec $(SERVER_CONTAINER) python manage.py check

# Help
# Help
help:
	@echo "üê≥ Docker Compose Commands:"
	@echo "  make up                 - –ó–∞–ø—É—Å–∫ –ø—Ä–æ–µ–∫—Ç–∞"
	@echo "  make up-detached        - –ó–∞–ø—É—Å–∫ –≤ —Ñ–æ–Ω–µ"
	@echo "  make down               - –û—Å—Ç–∞–Ω–æ–≤–∫–∞"
	@echo "  make down-clean         - –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å —É–¥–∞–ª–µ–Ω–∏–µ–º volumes"
	@echo "  make logs               - –õ–æ–≥–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"
	@echo "  make restart            - –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"
	
	@echo ""
	@echo "üóÑÔ∏è Database Commands:"
	@echo "  make db-shell           - PostgreSQL –∫–æ–Ω—Å–æ–ª—å"
	@echo "  make db-makemigrations  - –°–æ–∑–¥–∞—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏"
	@echo "  make db-makemigrations app=<app> - –°–æ–∑–¥–∞—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"
	@echo "  make db-migrate         - –ü—Ä–∏–º–µ–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏"
	@echo "  make db-migrate-app app=<app> - –ú–∏–≥—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"
	@echo "  make db-showmigrations  - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–π"
	@echo "  make db-reset           - –ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å –ë–î"
	
	@echo ""
	@echo "üêç Django Management:"
	@echo "  make shell              - Django shell"
	@echo "  make createsuperuser    - –°–æ–∑–¥–∞—Ç—å —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
	@echo "  make collectstatic      - –°–æ–±—Ä–∞—Ç—å —Å—Ç–∞—Ç–∏–∫—É"
	@echo "  make test               - –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã"
	@echo "  make test-app app=<app> - –¢–µ—Å—Ç—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"
	
	@echo ""
	@echo "‚öõÔ∏è Frontend (Next.js) Management:"
	@echo "  make client-bash        - Shell –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ –∫–ª–∏–µ–Ω—Ç–∞"
	@echo "  make client-logs        - –õ–æ–≥–∏ –∫–ª–∏–µ–Ω—Ç–∞"
	@echo "  make client-install     - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ (npm install)"
	@echo "  make client-audit       - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É—è–∑–≤–∏–º–æ—Å—Ç–∏ (npm audit)"
	@echo "  make client-audit-fix   - –ü–æ—á–∏–Ω–∏—Ç—å —É—è–∑–≤–∏–º–æ—Å—Ç–∏ (–±–µ–∑–æ–ø–∞—Å–Ω—ã–µ)"
	@echo "  make client-audit-fix-force - –ü–æ—á–∏–Ω–∏—Ç—å –≤—Å—ë (–¥–∞–∂–µ –ª–æ–º–∞—é—â–µ–µ)"
	@echo "  make client-update-browserslist - –û–±–Ω–æ–≤–∏—Ç—å –±–∞–∑—É Browserslist"

	@echo ""
	@echo "üîß Development Tools:"
	@echo "  make server-bash        - Bash –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ server"
	@echo "  make requirements       - –û–±–Ω–æ–≤–∏—Ç—å requirements.txt"
	@echo "  make health             - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã"
	@echo "  make ps                 - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
	
	@echo ""
	@echo "üßπ Cleanup:"
	@echo "  make clean-cache        - –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à Docker"
	@echo "  make clean-all          - –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞"
